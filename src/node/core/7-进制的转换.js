// 进制转换
// node中默认文件读取操作，读取出来的都是buffer 十六进制
// 内存的表示方式就是buffer，内存是二进制的
// 进制转化问题 0.1 + 0.2 != 0.2
// 0.1 和0.2转化为二进制都是无限循环小数，js在最长是64位进行了向上截取，所以结果会比0.3稍微大一些

// 十进制转化为 其他进制: 整数部分转换几进制就除几，小数部分转换几进制就乘几
// 十进制整数转换为二进制会采用除2取余的逆序排列
// 10 / 2 = 5 -> 0
// 5 / 2 = 2  -> 1
// 2 / 2 = 1  -> 0
// 1 / 2 =    -> 1
//  value: 1010

// 十进制的小数转换为二进制： 小数 * 2 取整
// 0.1 转化为二进制
// 0.1 * 2 = 0.2  -> 0
// 0.2 * 2 = 0.4  -> 0
// 0.4 * 2 = 0.8  -> 0
// 0.8 * 2 = 1.6  -> 1
// 0.6 * 2 = 1.2  -> 1
// 0.2 * 2 = 0.4  -> 0
// 0.4 * 2 = 0.8  -> 0
// 0.8 * 2 = 1.6  -> 1
// 0.6 * 2 = 1.2  -> 1
// value: 0.001100110011001100110011001100110011

// 其他进制转化为十进制： 小数点前面：数字乘进制的数字位置次方 相加 小数部分：数字乘进制的数字位置负次方
// 二进制的 101.01
// 0xff 十六进制 0b二进制  0o八进制
// 将十进制转化为其他进制
console.log((0xff).toString(2))
// 将任意进制转化为十进制
console.log(parseInt('0xff', 16))

const a = 1 * 2 ** 0 + 0 * 2 ** 1 + 1 * 2 ** 2 + 0 * 2 ** -1 + 1 * 2 ** -2
//          1               0             4     .    0       +     0.25      5.25
console.log(a)

console.log(2 ** 0)

// 进制的转化基于编码
// ASCII（美国） 默认一个字节来表示一个字母或者符号，1个字节有8个bit 最大是8个1 2**8-1 = 255
// 其他语言基于此编码进行添加：
// GB2312 两位表示一个中文  第一位是从128开始的 （255 -127）* 255
// 发展到后来的GB18030  GBK
// 再到最后的unicode -> utf8 使用3个字节来表示一个中文，node中默认支持utf-8 格式

// base64 二进制的值不能超过64 （核心就是进制的转换）
// base64是可以反解的

// 浏览器的header中，任意的url中都可以采用base64
// 前端实现文件预览 - FileRead
// 特点： 转码后的结果比原来的内容大
console.log(Buffer.from('楠')) // <Buffer e6 a5 a0>
// 将十六进制转化为二进制
console.log((0xe6).toString(2)) // 11100110
console.log((0xa5).toString(2)) // 10100101
console.log((0xa0).toString(2)) // 10100000
// 我们的汉字是使用 3个字节， 每个字符8个bit位，这样最大就是255
// base64最大不能超过64所以采用 4个字节，每个字节6位，最大就是： 2 ** 4 -1 = 63
// 3 * 8： 11100110 10100101 10100000
// 转换
// 6 * 4： 111001 101010 010110 100000

// 因为一个汉子从3个字节增加到4个字节所以问价年内容变大了

// base64转化后去特定的字符串取值
let str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
str += 'abcdefghijklmnopqrstuvwxyz'
str += '0123456789+/'

const result = str[0b111001] + str[0b101010] + str[0b010110] + str[0b100000]
console.log(result) // 5qWg
// base64就是编码转化， 优点： 不需要发送http请求 缺点：大小会变大
// 可以直接转换
console.log(Buffer.from('楠').toString('base64'))
